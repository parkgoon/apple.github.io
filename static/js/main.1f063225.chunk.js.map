{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Sider","Footer","Content","columns","title","dataIndex","sorter","a","b","playerName","localeCompare","filters","text","value","onFilter","record","position","indexOf","playerPosition","playerPTS","App","useState","data","setData","useEffect","fetch","then","result","json","console","log","className","style","background","width","color","direction","dataSource","onChange","pagination","extra","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAIQA,G,OAAmCC,IAAnCD,QAAgBE,GAAmBD,IAA3BE,OAA2BF,IAAnBC,OAAOE,EAAYH,IAAZG,QAEzBC,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,aACXC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,WAAWC,cAAcF,EAAEC,cAEjD,CACEL,MAAO,OACPC,UAAW,iBACXM,QAAS,CACP,CACEC,KAAM,IACNC,MAAO,KAET,CACED,KAAM,IACNC,MAAO,KAET,CACED,KAAM,IACNC,MAAO,MAGXC,SAAU,SAACD,EAAOE,GAAR,OAAmBA,EAAOC,SAASC,QAAQJ,IAAU,GAC/DP,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEW,eAAeR,cAAcF,EAAEU,kBAErD,CACEd,MAAO,OACPC,UAAW,YACXC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEY,UAAYX,EAAEW,aA0DvBC,MAtDf,WAAgB,IAAD,EACWC,qBADX,mBACNC,EADM,KACAC,EADA,KAyBb,OAJAC,qBAAU,WAXRC,MAAM,4CACHC,MAAK,SAAUC,GACd,OAAOA,EAAOC,UAEfF,MAAK,SAAUE,GACdL,EAAQK,GACRC,QAAQC,IAAI,SAAUF,QAOzB,IAGD,yBAAKG,UAAU,OACf,kBAAC,IAAD,CAAQC,MAAO,CAACC,WAAY,UAC1B,kBAAC,IAAD,KACA,kBAACjC,EAAD,CAAOkC,MAAM,MAAMF,MAAO,CAACC,WAAY,UAAvC,QAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKD,MAAO,CAACC,WAAY,QAAzB,8CACA,kBAAC,IAAD,CAAKD,MAAO,CAACC,WAAY,OAAQE,MAAO,UAAxC,4CAAkE,6BAAS,6BAAS,6BAAS,6BAAS,gCAG1G,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAU,YACjB,kBAACtC,EAAD,CAAQkC,MAAO,CAACC,WAAY,UAA5B,wEACA,kBAAC/B,EAAD,CAAS8B,MAAO,CAACE,MAAO,SAAUD,WAAY,QAASE,MAAO,UAC5D,kFACA,kBAAC,IAAD,CAAOhC,QAASA,EAASkC,WAAYf,EAAMgB,SAtClC,SAACC,EAAY5B,EAASL,EAAQkC,GAC7CX,QAAQC,IAAI,WAAYS,EAAY5B,EAASL,EAAQkC,GACrDX,QAAQC,IAAI,kBAAmBR,SAwC7B,kBAACtB,EAAD,CAAOkC,MAAM,MAAMF,MAAO,CAACC,WAAY,UAAvC,QAEA,kBAAC,IAAD,CAAKD,MAAO,CAACC,WAAY,QAAzB,oDAA+C,6BAAS,6BAAS,6BAAS,6BAAS,mCC1ErEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.1f063225.chunk.js","sourcesContent":["import { Table, Layout, Space, Row, Col} from \"antd\";\nimport \"./App.less\";\nimport React, { useState, useEffect } from \"react\";\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst columns = [\n  {\n    title: \"Name\",\n    dataIndex: \"playerName\",\n    sorter: (a, b) => a.playerName.localeCompare(b.playerName),\n  },\n  {\n    title: 'Pos.',\n    dataIndex: 'playerPosition',\n    filters: [\n      {\n        text: 'C',\n        value: 'C',\n      },\n      {\n        text: 'F',\n        value: 'F',\n      },\n      {\n        text: 'G',\n        value: 'G',\n      },\n    ],\n    onFilter: (value, record) => record.position.indexOf(value) > -1,\n    sorter: (a, b) => a.playerPosition.localeCompare(b.playerPosition),\n  },\n  {\n    title: 'Pts.',\n    dataIndex: 'playerPTS',\n    sorter: (a, b) => a.playerPTS - b.playerPTS\n  },\n];\n\nfunction App() {\n  const [data, setData] = useState();\n\n  const onChange = (pagination, filters, sorter, extra) => {\n    console.log(\"params->\", pagination, filters, sorter, extra);\n    console.log(\"onclick data ->\", data);\n  };\n\n  const fetchPlayer = () => {\n    // fetch(\"http://localhost:8080/api/player/all\")\n    fetch(\"http://221.165.6.252:8080/api/player/all\")    \n      .then(function (result) {\n        return result.json();\n      })\n      .then(function (json) {\n        setData(json);\n        console.log(\"json->\", json);\n        // data=json.data;\n      });\n  };\n\n  useEffect(() => {\n    fetchPlayer();\n  }, []);\n  \n  return (\n    <div className=\"App\">     \n    <Layout style={{background: 'white'}}>\n      <Space>\n      <Sider width=\"200\" style={{background: 'white'}}>\n      Sider\n        <Layout>          \n          <Row style={{background: 'red'}}>카운터자리(Row>Circle)</Row>\n          <Row style={{background: 'blue', color: 'white'}}>구단명자리(Row>Table)<br></br><br></br><br></br><br></br><br></br></Row>\n        </Layout>\n      </Sider>\n      <Layout>\n        <Space direction=\"vertical\">\n        <Header style={{background: 'green'}}>현재선택선수정보자리(Header)</Header>\n        <Content style={{width: '1200px', background: 'black', color: 'white'}}>\n          <p>선수명단자리(Content>Table)</p>\n          <Table columns={columns} dataSource={data} onChange={onChange} />\n        </Content>        \n        </Space>\n      </Layout>\n      <Sider width=\"100\" style={{background: 'white'}}>\n      Sider\n      <Row style={{background: 'red'}}>선택된선수자리(Table)<br></br><br></br><br></br><br></br><br></br></Row>\n      </Sider>\n      </Space>\n    </Layout>  \n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}