{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","y","useState","x","state","setState","onScroll","window","scrollY","scrollX","useEffect","addEventListener","useScroll","style","height","className","position","color","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"6KAuBMA,EAAM,WAAO,IACTC,EApBQ,WAAM,MAEIC,mBAAS,CACjCC,EAAG,EACHF,EAAG,IAJiB,mBAEfG,EAFe,KAERC,EAFQ,KAOhBC,EAAW,WACfD,EAAS,CAAEJ,EAAGM,OAAOC,QAASL,EAAGI,OAAOE,WAQ1C,OANAC,qBAAU,WAGRH,OAAOI,iBAAiB,SAAUL,KAEjC,IACIF,EAIOQ,GAANX,EACR,OACE,qBAAKY,MAAO,CAAEC,OAAQ,UAAYC,UAAU,MAA5C,SACE,oBAAIF,MAAO,CAAEG,SAAU,SAAUC,MAAOhB,EAAI,IAAM,MAAQ,QAA1D,mBAOAiB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,GACVlB,QCxBAuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdH,IAASC,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFb,SAASC,eAAe,SAM1BG,K","file":"static/js/main.7fce5a7b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Scroll을 움직이면 h1의 스타일을 변화해주기 위한 함수.\nconst useScroll = () => {\n  // state를 생성합니다.\n  const [state, setState] = useState({\n    x: 0,\n    y: 0\n  });\n  // scrll의 값을 가져와 state를 갱신합니다.\n  const onScroll = () => {\n    setState({ y: window.scrollY, x: window.scrollX });\n  };\n  useEffect(() => {\n    // scroll 이벤트를 만들어줍니다. 스크롤을 움직일때 마다 \n    // onScroll 함수가 실행됩니다.\n    window.addEventListener(\"scroll\", onScroll);\n    // return () => window.removeEventListener(\"scroll\", onScroll); \n  }, []);\n  return state;\n};\n\nconst App = () => {\n  const { y } = useScroll();\n  return (\n    <div style={{ height: \"1000vh\" }} className=\"App\">\n      <h1 style={{ position: \" fixed\", color: y > 100 ? \"red\" : \"blue\" }}>\n        Hi\n      </h1>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component, useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}